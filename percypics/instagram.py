# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01-instagram-scraping.ipynb (unless otherwise specified).

__all__ = ['initialise_loader', 'load_profile_posts', 'post_to_date', 'post_to_caption', 'post_to_media_url',
           'extract_post_content', 'retrieve_posts']

# Cell
import json
import pandas as pd

import instaloader

import os
import time
import dotenv

# Cell
def initialise_loader():
    user = os.getenv('INSTA_USER')
    password = os.getenv('INSTA_PSWD')

    loader = instaloader.Instaloader()

    if (user is not None) and (password is not None):
        loader.login(user, password)

    return loader

# Cell
def load_profile_posts(loader, profile='percythevizslaadventures'):
    percy_profile = instaloader.Profile.from_username(loader.context, profile)
    posts = percy_profile.get_posts()

    return posts

# Cell
post_to_date = lambda post: pd.to_datetime(post.date).strftime('%Y-%m-%d %H:%M')

# Cell
def post_to_caption(post, remove_hashtags=True):
    caption = post.caption

    if caption is None:
        return ''

    if remove_hashtags == True:
        sep = ' #'
        hashtag_text = sep + sep.join(post.caption_hashtags)
        caption = caption.replace(hashtag_text, '')

    return caption

# Cell
def post_to_media_url(post):
    if post.is_video:
        url = post.video_url
    else:
        url = post.url

    return url

# Cell
def extract_post_content(posts, latest_recorded_post_date=None):
    post_content = []

    for post in posts:
        post_date = post_to_date(post)

        if latest_recorded_post_date is not None:
            if pd.to_datetime(post_date) < latest_recorded_post_date:
                return post_content

        post_content += [{
            'date': post_date,
            'caption': post_to_caption(post),
            'media_url': post_to_media_url(post)
        }]

    return post_content

def retrieve_posts(loader, fp):
    df_posts = pd.read_csv(fp)
    latest_recorded_post_date = pd.to_datetime(df_posts['date'].max())

    posts = load_profile_posts(loader)

    if posts == []:
        return df_posts

    post_content = extract_post_content(posts, latest_recorded_post_date)

    df_posts = pd.DataFrame(post_content).append(df_posts)

    return df_posts